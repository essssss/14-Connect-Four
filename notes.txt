Step One: Planning

Before looking at our code, take a few minutes to think about how you would build a game like this using HTML/JS/CSS:


*** what HTML would be useful for the game board itself?
Maybe a series of divs inside a flexbox?

*** how could you represent a played-piece in the HTML board?
a simple color class for each div. say Red and Blue

*** in the JavaScript, what would be a good structure for the in-memory game board?
An array of arrays, silly.

*** what might the flow of the game be?
each turn will consist of a "piece drop" where the player clicks a column and the piece falls as low in the column as it can. The piece is displayed the proper color. The game will check for a winner and if there is no winner it will switch turns.

***Then, write down some functions names/descriptions that would be useful for this game.

A function that takes a click and places the piece on the lowest possible row. 
checkerDrop()

A function that places the 'checker' in place.
redChecker()
blueChecker()

several functions that check for win conditions. 
--can I do one for all horizontal, one for all vertical, and one for diagonals?
--do I have to check each possible winning position?






Step Two: ES2015

This code would benefit from updating to ES2015 style — there are lots of place where var is used that could be changed to either let or const to improve readability. Are there other style fixes you can make?


Step Three: makeBoard

The makeBoard() function needs to be implemented. It should set the global board variable to be an array of 6 arrays (height), each containing 7 items (width).

You could do this like:

const board = [
  [ null, null, null, null, null, null, null ],
  [ null, null, null, null, null, null, null ],
  [ null, null, null, null, null, null, null ],
  [ null, null, null, null, null, null, null ],
  [ null, null, null, null, null, null, null ],
  [ null, null, null, null, null, null, null ],
];
However, it’s far better to make the game flexible about the height and width of the board and use the WIDTH and HEIGHT constants in connect4.js. Implement this function to make this board dynamically.

--empty board arry 
    const board = []

-- "For" loop over the HEIGHT to create empty rows
    for(let i=0,i<HEIGHT,i++){
        board.push(createRow())
    }

-- "For" loop over the WIDTH to fill the row
    function createRow() {for(let i=0,i<WIDTH,i++){
        row1.push(null)
    }}


    //Step Four: makeHTMLBoard

This function is missing the first line, that sets the board variable to the HTML board DOM node. Fix this.

Add comments to the code that dynamically creates the HTML table.



Step Five: placeInTable & Piece CSS

This function should add a div inside the correct td cell in the HTML game board. This div should have the piece class on it, and should have a class for whether the current player is 1 or 2, like p1 or p2.

Update the CSS file to:

make the piece div round, not square
be different colors depending on whether it’s a player #1 or #2 piece
While not everything will work, you should now be able to click on a column and see a piece appear at the very bottom of that column. (They won’t yet appear in the right row and will always be player #1 pieces)

